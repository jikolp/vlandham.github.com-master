---
layout: post
title: Kansas City Streets Visualized
categories:
- vis
---

h3. Using Tilemill and OpenStreetMaps for Printable Map-Art

Awhile ago, Gregor Aisch, creator of the awesome up-and-coming "Kartograph":http://kartograph.org/ posted his "Berlin Streets Visualized":http://vis4.net/blog/posts/berlin-streets/ , a map of just Berlin streets inspired by Ben Fry's "All Streets Map":http://fathom.info/allstreets/ .

When I saw how nice and simple it was to create, I wanted to make one for myself, of my hometown - Kansas City. Here's a scaled down version of the end result:

<div class="center">
<a href="http://vallandingham.me/images/vis/kc_map_medium.jpg"><img class="center" src="http://vallandingham.me/images/vis/kc_map_small.png" alt="kc map" style="border:1px dotted #cccccc;"/></a>
</div>

Gregor used street data in Adobe Illustrator form from the wonderful "Cloudmade OSM downloads":http://downloads.cloudmade.com/ . Alas, Cloudemade's downloads don't include city level exports for North American cities (at least I didn't see it anywhere). 

So I decided to try a slight variation on the theme: use Shapefiles from OSM and style them using "TileMill":http://mapbox.com/tilemill/ . Here I'll spell out some of the specifics on how this works.

h2. Metro Extracts

While it would be possible to use "Osmosis":http://wiki.openstreetmap.org/wiki/Osmosis to extract my local cities OSM data, fortunately for me, this was not necessary. 

The wonderful "Metro Extracts":http://metro.teczno.com/ provided as a service by "Michal Migurski":http://mike.teczno.com/notes/ (who's blog you should subscribe to right now) gives you nice OSM extracts for a large list of metro areas world-wide. 

The one gotcha with this service is that, unlike Cloudemade's downloads, these extracts have not been converted to Illustrator format. I'm sure that getting it in that format wouldn't be too hard, but honestly I'm pretty aweful at Illustrator, so wanted to try out a different way to style this data.

To this end, I grabbed the _imposm shapefiles_ to work with in TileMill.

h2. TileMill

"TileMill":http://mapbox.com/tilemill/ is a great tool from the MapBox team. Its really meant create and style map tiles to be hosted on a service like their "map publishing platform":http://mapbox.com/plans/ . They have some great looking "map styles":http://mapbox.com/maps/ and you can upload your own custom tiles or data, like the NYPL Lab's "1940s Census Tiles":https://tiles.mapbox.com/nypllabs/map/nyc1940-16 used on their "Direct Me NYC":http://directme.nypl.org/ site. 

In addition to all this map tile stying, since version 0.6 TileMill has had the ability to export to SVG. This means we can style our map with TileMill, and get it in a vector format suitable for printing!

Here's the basic process I used to import, style and export my street data:

1. Extract the shapefile archive.

2. Open TileMill, create a new Project called _KC Print Map_

I included the 'Default data', but then hid it in my final map styling. 

3. Open your new Project

You should see a nice view of the  world.

4. Select the Layers tab and load your shapefile

<div class="center">
<img src="http://vallandingham.me/images/vis/tilemill_layers.png" alt="tilemill layers tab">
</div>

With the layers tab open, select *Add layer*. Navigate to where you extracted your shapefiles. Select the _kansas-city-lawrence-topeka.osm-roads.shp_ file for your Datasource and use *roads* for your ID.

*Note:* Some of the road types have their own shapefiles, so you could import these layers separately and style them separately. This is the approach I started with, but ran into issues with missing road types and layering. So lets import all the roads, style the types separately (as we will see below). 

5. Select *Style & Save* and then zoom in to your road data.

You should have a nice view of all the roads in KC (or whatever metro you choose).

<div class="center">
<img class="center" src="http://vallandingham.me/images/vis/tilemill_roads.png" alt="tilemill roads overview">
</div>

Now lets style these roads!

h2. Carto

"Carto":http://mapbox.com/tilemill/docs/manual/carto/ is the styling syntax used by TileMill. It looks a lot like CSS, but is based on "less":http://lesscss.org/ so has support for variables and conditional effects, which we will make use of here.

h3. Road Styles

The full @style.mss@ file used to style the map can be "found in this gist":https://gist.github.com/2312647#file_style.css

Here, I'll provide a shortened version of the code, to talk about:

<script src="https://gist.github.com/2312647.js?file=short.css"></script>

Lets go over the details.

First we create two variables, @@minor_color@ and @@major_color@, to store the two colors used to style the different road types. 

The first style, for @#roads@ sets the basis of what all the roads will look like. It makes all the roads skinny and sets them to the minor road color.

The stylings after that override this default setting for certain types of roads. We use conditional styles, (the @[key='value']@ component) to select which road type we are talking about. 

First we hide a number of types that aren't roads. The above example hides railways. I used QGIS to find all the different types of roads in the shapefile, but there are probably lots of ways to do that.

Then, for major roads and highways, we increase the line width and use the darker @@major_color@. These major road stylings use the _New symbolizer_ syntax (the @::newsymbol@) which creates a ordering of overlays. A poor-mans version of separate layers. This works because we start with small roads and overlay larger ones. So the *order* of the stylings *matter*. Something to keep in mind. 

The nice thing about this approach is that we can try out all sorts of different stylings really easily. Want to make major roads green and highways really fat? No problem. A two line change and you have:

<div class="center">
<img class="center" src="http://vallandingham.me/images/vis/tilemill_roads_detail_1.png" alt="tilemill roads detail">
</div>

TileMill makes it really easy to explore different combinations of styles.

h2. Export

Once you have something you like, its time to get it into a format suitable for printing.

Select *Export* at the top-right of the screen. Then select *SVG*. You might need to zoom into your region of interest again and crop using _shift-drag_ as necessary. When you have the cropping how you want it, select *Export*. 

This will generate a file in your TileMill's _export directory_. I believe, by default, it is in @~/Documents/MapBox/export@.

h2. Finishing Touches

Ok, so I would be misleading if I didn't mention that I finished up by importing the SVG into Illustrator to add a white border and to resize it to be 20x24in. Theoretically, you could do this part in any editor capable of handling SVGs. However, none of the actual styling of the map was done in Illustrator.

I enjoy how interesting landmarks jump out at you, even when presented with just the streets of a city you are familiar with. For example, here is our lowly airport:

<div class="center">
<img class="center" src="http://vallandingham.me/images/vis/tilemill_airport.png" alt="tilemill airport detail">
</div>

So go out and create some interesting map art with TileMill and Open Street Map data!

And thanks to "Gregor":http://vis4.net/blog/ for the nice tutorial to copy!
