---
layout: default
title: data types
---

h2. Data Types

In "lesson 1":variables.html we saw a preview of data types when we created variables to store a string and a number. Here we will dive into other data types available to the Ruby programmer.

In the world, there are many different types of data. Temperatures, last names, your birthday - these are all different *types* of data, right? When programming, we deal with these different types, differently. This allows us to interact with different types of data in ways that make sense with that data.

h3. Why Data Types?

Now we already saw the @String@ data type - a word or sentence surrounded by @"@. You might think to yourself, "why not store everything as a string?". Technically a string could be something like @"123.4"@, and thus _represent_ a number. The problem is we usually want to interact with numbers as numbers. Add, subtract, log; these are all operations on numbers. These operations don't make sense, or don't mean the same thing, with strings. 

So in short, data types allow us to work with data in ways that makes sense with that data.

h3. Variables and Data Types

So what is the relationship between variables and data types? Well, remember, a variable _stores_ a particular piece of data, allowing you to use it later. So a variable represents a particular piece of data with a particular data type.

Open @irb@ and create some variables 

{% highlight ruby %}
person = "John Higgins"
result = 430
{% endhighlight %}

Just as a review, @person@ is a variable that *stores* (or *points at*) the string @"John Higgins"@. @result@ is a variable that stores the number @430@. Got it?

In Ruby, a variable can point to any kind of data type. Furthermore, you can change the data, and the data type that a variable points to. Try this:

{% highlight ruby %}
result = "success"
{% endhighlight %}

See what we just did? The variable @result@ now points to the *string* @"success"@. This is no big deal for Ruby, but for the programmer, you usually need to have some idea of what a variable is storing, so you know how to interact with that data.

Another quick question: what happened to the number @430@? Well, there is no other variable pointing to that number, so its gone, destroyed, lost. If you don't have a variable pointing to a piece of data, then you don't have that data.

h3. Methods

I've been talking about _interacting_ and _dealing_ with different types of data, but what does that really mean? Well, in Ruby each type of data responds to a different set of commands. These commands are know as *Methods* of that particular data type. You can think of methods as _commands_ or _questions_ you are sending the data type. We will talk a lot more about methods in the future - but in order to appreciate the differences between data types, its good to know a bit about how to interact with them.

To call a method on a data type, you type the data or the variable pointing to the data then you type period (@.@), and then the method name and then parenthesis (@()@). Its not as difficult as it sounds.

For example, strings have a method called @length@. When you call @length@ on a string, the string tells you how long it is. In @irb@ this is reported back immediately after you hit the return key. Lets try it:

{% highlight ruby %}
result = "a party"
result.length()
# => 7
{% endhighlight %}

The method @length@ returned @7@ for the string @"a party"@.

Just to show this is a method connected to the data type and not the variable, lets call the same method on a string that isn't pointed to by a variable:

{% highlight ruby %}
"a big mess".length()
# => 10
{% endhighlight %}

Also, lets try calling @length@ on a number - to show that this method can be called on strings, but not numbers:

{% highlight ruby %}
123.length()
# => NoMethodError: undefined method `length' for 123:Fixnum
# =>	from (irb):5
# =>	from /Users/jfv/.rvm/rubies/ruby-1.9.2-p180/bin/irb:16:in `<main>'
{% endhighlight %}

You see? The number @123@ doesn't know how to respond to the method @length@ and so raises an error. This is what I mean by interacting with different data types appropriately.

We will get back to methods later.

Now lets review some of the data types you have in Ruby. Hunker down and dig in!

h2. Integer

Ok, I've been referring to numbers as just numbers - but that is not entirely accurate. There are actually *two* different types of numbers: @Integers@ and @Floats@. Integers are *whole numbers*. @123@, @40001@, @12@ are all examples of Integers.

In the example above, when we called @123.length()@ - the error message we got indicated that 123 was something called a @Fixnum@. That is just what ruby usually calls an Integer. We will keep calling Integers "@Integers@", because that is what they are.

One thing to remember about Integers is that performing operations with Integers usually results in an Integer. The big thing to watch out here with is when performing division:

{% highlight ruby %}
10 / 4
# => 2
{% endhighlight %}

Huh? @10 / 4@ in the real world is @2.5@, right? However, with Integers, operations return Integers. @2.5@ is not an Integer, so the operation rounds down. Sometimes this is what we want. Other times, we need to use Floats.

h2. Float

A @Float@ is the other type of number in programming. A Float stores any real number: @12.4@, @1245.5555@, @34.0@. You can see that you always use decimal notation when writing a float. Also, you don't separate numbers with a comma. 

See the Float @34.0@? This is how we represent a whole number when we want to store it as a Float. The @.0@ tells Ruby to not store it as an Integer. Operations with Floats return Floats:

{% highlight ruby %}
10.0 / 4.0
# => 2.5
{% endhighlight %}

Alright! Math makes sense again.

What about operations involving both Floats and Integers?

{% highlight ruby %}
10 / 4.0
# => 2.5

10.0 / 4
# => 2.5

10 / 4 + 2.5
# => 4.5

10.0 / 4 + 2.5
# => 5.0
{% endhighlight %}

You see what is happening? Each operation is looked at separately (and in the order of the order of operations). If one of the values in the operation is a Float, then the return value is a Float. With @10 / 4 + 2.5@, the first operation executed (division of 10 by 4) only has Integers in it - so its returned value is also an Integer (@2@). But then this @2@ is added to @2.5@, which is a Float, so the end result is a Float. 

Play around with other operations with @Floats@ and @Integers@.

h2. String

We've seen @Strings@ a few times now. We know Strings store characters, words, sentences, paragraphs, etc. Its all text. Strings store text. You indicate the data is a string by surrounding it with quotes (@"@).

{% highlight ruby %}
name = "Josh Meyer"
{% endhighlight %}

One very nice thing about Strings in Ruby is that you can insert variables into them using some special syntax. Let's see an example:

{% highlight ruby %}
name = "Willy Shakes"
title = "Love Sucks"
count = 4

"#{name} wrote the play #{title} #{count} times before getting it right"
# => "Willy Shakes wrote the play Love Sucks 4 times before getting it right"
{% endhighlight %}

Breaking it down: we first create 3 variables, @name@, @title@, and @count@. Then we insert these variables into a string by using the syntax: @#{variable_name}@. So pound sign (@#@), open curly bracket (@{@), the variable name, then close curly bracket (@}@). It might look a little weird at first, but hopefully you can start thinking about how powerful this is!

h2. Array

So far we have been talking about data types that represent individual pieces of data. Integer is *a* number. String is *a* sentence. But often times we want to store many different pieces of data at once. Like a list of names, or a table of scores.

Let's say you have a list of people to invite to a party, and want to work with them in a program. Theoretically, we could keep track each individual name as a separate variable:

{% highlight ruby %}
name1 = "Jimmy Dean"
name2 = "Hans Anderson"
#...
{% endhighlight %}

That would get really terrible, really quickly. 

This is where @Arrays@ come in. An Array is a data type that stores a list pieces of data. You can create an array in Ruby by using @[@ and @]@. Each piece of data in your Array is separated with a comma:

{% highlight ruby %}
names = ["Jimmy Dean", "Hans Anderson", "Bob Barker"]
{% endhighlight %}

So @names@ is an Array that is storing Strings. To get one element out of your Array, you first type your Array's name, then open square bracket (@[@), then the index of the element you want, then close square bracket (@]@). Let's see this in action:

{% highlight ruby %}
names[0]
# => "Jimmy Dean"
{% endhighlight %}

Notice that the first element in the Array's index is @0@. That is to say, to get the first name in @names@, you ask for the name at position @0@ *NOT* @1@. The index @1@ gives you the value in the *second* position. While this may seem a little weird, it's not that hard to get used to, and makes life a lot easier in the long run. Trust me.

Again to recap, an Array can hold multiple pieces of data. You create and index into the Array using square brackets @[]@.

h2. Hash

The @Hash@ is a bit harder to explain, but worth the effort to understand. A Hash is a container that holds multiple pieces of data - just like an Array. With an Array, the data is ordered in a list, and you retrieve data from that list by providing the position of the data you want in that list. @names[0]@ gives you the first name, @names[1]@ the second, etc. In effect, the index @0@,@1@ is the *key* by which you get your data.

With Hashes, you define your own keys, instead of having to use the position in the list. Another way to say it is, in a Hash, you define a mapping between a unique name (the *key*) and the data you are storing in the Hash (the *value*). 

Hashes are also called _Associative Arrays_ or _Dictionaries_ in other programming languages. Here is what a Hash looks like:

{% highlight ruby %}
ages = {"Jimmy Dean" => 34, "Sam Sid" => 68, "Josh Gorton" => 12}
{% endhighlight %}

We define a Hash using Squiggly brackets (@{}@). Inside the brackets, we first name the *key*, then @=>@ (which looks like an *arrow*), then the *value*. In the example above, The keys are Strings that hold names. The values are Integers, representing ages.

To get a value back out of a Hash, we first type the Hashes name, then open square bracket (@[@), then the *key* of the value we want, then close square bracket (@]@). Here's an example:

{% highlight ruby %}
ages["Josh Gorton"]
# => 12
{% endhighlight %}

It looks a lot like accessing elements in an Array right? But instead of the position in the list, we use the key we've associated with the value we want.

To rehash (no pun intended): Hashes store key value pairs. You use squiggly brackets (@{}@) to create one. To get a value from a Hash, you have to provide the key associated with that value. 

While perhaps a little confusing, Hashes are extremely powerful. Try to create one now that uses peoples names as keys and then their pet's names as values.

h2. Booleans

I know you're tired, so we will hit a couple more data types really quickly. Often times we need to store just if some condition is true or not. Is the door currently open? Is this person's name "Sam Tarly". 

@Boolean@ is a data type that stores just *true* or *false*. In fact @true@ and @false@ are keywords in Ruby that represent the two possible Boolean values. Lets see them used in an equation:

{% highlight ruby %}
1 == 1
# => true

1 > 2
# => false
{% endhighlight %}

Here we are comparing two numbers. The first line asks is @1@ equal to @1@? Note that we use two equals signs (@==@). This is because a sign equal sign is used for assigning values to variables, remember? @age = 13@. So to compare, we need to use @==@.

Anyways, @1@ is equal to @1@, so @true@ is returned. This is a Boolean. Likewise, @1@ is *not* greater than @2@, so the Boolean @false@ is returned. Booleans get used a lot, because they are so simple.

h2. Nil

Similar to @true@ and @false@, some times we would like to represent *nothing*. Nihilism aside, there are a lot of practical uses for nothingness. For example, a variable hasn't been given a value yet, or there was an element missing in a questionnaire.

Ruby has a special data type called @nil@ that represents nothing. You can assign variables to it and use it like any other data type

{% highlight ruby %}
nothing = nil
1 == nothing
# => false
{% endhighlight %}

There are other data types available, but these are the most commonly used and most common in other languages. With these basic storage structures, we can build up lots of complex fun stuff, as we will see!

Data Types!
